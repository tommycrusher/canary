Players
    // player:isPlayer()
    // player:getGuid()
    // player:getIp()
    // player:getAccountId()
    // player:getLastLoginSaved()
    // player:getLastLogout()
    // player:getAccountType()
    // player:setAccountType(accountType)
    // player:getCapacity()
    // player:setCapacity(capacity)
    // player:getFreeCapacity()
    // player:getDepotChest(depotId[, autoCreate = false])
    // player:getSkullTime()
    // player:setSkullTime(skullTime)
    // player:getDeathPenalty()
    // player:getExperience()
    // player:addExperience(experience[, sendText = false])
    // player:removeExperience(experience[, sendText = false])
    // player:getLevel()
    // player:getMagicLevel()
    // player:getBaseMagicLevel()
    // player:getMana()
    // player:addMana(manaChange[, animationOnLoss = false])
    // player:getMaxMana()
    // player:setMaxMana(maxMana)
    // player:getManaSpent()
    // player:addManaSpent(amount)
    // player:getBaseMaxHealth()
    // player:getBaseMaxMana()
    // player:getSkillLevel(skillType)
    // player:getEffectiveSkillLevel(skillType)
    // player:getSkillPercent(skillType)
    // player:getSkillTries(skillType)
    // player:addSkillTries(skillType, tries)
    // player:getItemCount(itemId[, subType = -1])
    // player:getItemById(itemId, deepSearch[, subType = -1])
    // player:getVocation()
    // player:setVocation(id or name or userdata)
    // player:getSex()
    // player:getTown()
    // player:setSex(newSex)
    // player:setTown(town)
    // player:getGuild()
    // player:setGuild(guild)
    // player:getGuildLevel()
    // player:setGuildLevel(level)
    // player:getGuildNick()
    // player:setGuildNick(nick)
    // player:getGroup()
    // player:setGroup(group)
    // player:getStamina()
    // player:setStamina(stamina)
    // player:getSoul()
    // player:addSoul(soulChange)
    // player:getMaxSoul()
    // player:getBankBalance()
    // player:setBankBalance(bankBalance)
    // player:getStorageValue(key)
    // player:setStorageValue(key, value)
    // player:addItem(itemId[, count = 1[, canDropOnMap = true[, subType = 1[, slot = CONST_SLOT_WHEREEVER]]]])
    // player:addItemEx(item[, canDropOnMap = false[, index = INDEX_WHEREEVER[, flags = 0]]])
    // player:addItemEx(item[, canDropOnMap = true[, slot = CONST_SLOT_WHEREEVER]])
    // player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])
    // player:getMoney()
    // player:addMoney(money)
    //player:removeMoney(money)
    // player:addMoney(money)
    // player:showTextDialog(id or name or userdata[, text[, canWrite[, length]]])
    // player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])
    // player:sendTextMessage(type, text, channelId)
    // player:sendChannelMessage(author, text, type, channelId)
    // player:sendPrivateMessage(speaker, text[, type])
    // player:channelSay(speaker, type, text, channelId)
    // player:openChannel(channelId)
    // player:getSlotItem(slot)
    // player:getParty()
    // player:addOutfit(lookType)
    // player:addOutfitAddon(lookType, addon)
    // player:removeOutfit(lookType)
    // player:removeOutfitAddon(lookType, addon)
    // player:hasOutfit(lookType[, addon = 0])
    // player:hasOutfit(lookType[, addon = 0])
    // player:getPremiumDays()
    // player:addPremiumDays(days)
    // player:removePremiumDays(days)
    // player:hasBlessing(blessing)
    // player:addBlessing(blessing)
    // player:removeBlessing(blessing)
    // player:canLearnSpell(spellName)
    // player:learnSpell(spellName)
    // player:forgetSpell(spellName)
    // player:hasLearnedSpell(spellName)
    // player:sendTutorial(tutorialId)
    // player:addMapMark(position, type, description)
    // player:save()
    // player:popupFYI(message)
    // player:isPzLocked()
    // player:getClient()
    // player:getHouse()
    // player:sendHouseWindow(house, listId)
    // player:setEditHouse(house, listId)
    // player:setGhostMode(enabled[, showEffect=true])
    // player:getContainerId(container)
    // player:getContainerById(id)
    // player:getContainerIndex(id)
    // player:getInstantSpells()
    // player:canCast(spell)
    // player:hasChaseMode()
    // player:hasSecureMode()
    // player:getFightMode()

Monsters and Monstertype
	// monster:isMonster()
	// monster:getType()
    // monster:getSpawnPosition()
    // monster:isInSpawnRange([position])
    // monster:isIdle()
    // monster:setIdle(idle)
    // monster:isTarget(creature)
    // monster:isOpponent(creature)
    // monster:isFriend(creature)
    // monster:addFriend(creature)
    // monster:removeFriend(creature)
    // monster:getFriendList()
    // monster:getFriendCount()
    // monster:addTarget(creature[, pushFront = false])
    // monster:removeTarget(creature)
    // monster:getTargetList()
    // monster:getTargetCount()
    // monster:selectTarget(creature)
    // monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])

    // MonsterType
    // get: monsterType:isAttackable() set: monsterType:isAttackable(bool)
    // get: monsterType:isConvinceable() set: monsterType:isConvinceable(bool)
    // get: monsterType:isSummonable() set: monsterType:isSummonable(bool)
    // get: monsterType:isIllusionable() set: monsterType:isIllusionable(bool)
    // get: monsterType:isHostile() set: monsterType:isHostile
    // get: monsterType:isPushable() set: monsterType:isPushable(bool)
    // get: monsterType:isHealthHidden() set: monsterType:isHealthHidden(bool)
    // get: monsterType:canPushItems() set: monsterType:canPushItems(bool)
    // get: monsterType:canPushCreatures() set: monsterType:canPushCreatures(bool)
    // get: monsterType:name() set: monsterType:name(name)
    // get: monsterType:nameDescription() set: monsterType:nameDescription(desc)
    // get: monsterType:health() set: monsterType:health(health)
    // get: monsterType:maxHealth() set: monsterType:maxHealth(health)
    // get: monsterType:runHealth() set: monsterType:runHealth(health)
    // get: monsterType:experience() set: monsterType:experience(exp)
    // get: monsterType:combatImmunities() set: monsterType:combatImmunities(immunity)
    // get: monsterType:conditionImmunities() set: monsterType:conditionImmunities(immunity)
    // monsterType:getAttackList()
    // monsterType:addAttack(monsterspell)
    // monsterType:getDefenseList()
    // monsterType:addDefense(monsterspell)
    // monsterType:getElementList()
    // monsterType:addElement(type, percent)
    // monsterType:getVoices()
    // monsterType:addVoice(sentence, interval, chance, yell)
        // monsterType:getLoot()
        // monsterType:addLoot(loot)
        // monsterType:getCreatureEvents()
        // monsterType:registerEvent(name)
        // monsterType:onThink(callback)
    // monsterType:onAppear(callback)
    // monsterType:onDisappear(callback)
    // monsterType:onMove(callback)
    // monsterType:onSay(callback)
    // monstertype:eventType(event)
    // monsterType:getSummonList()
    // monsterType:addSummon(name, interval, chance)
    // get: monsterType:maxSummons() set: monsterType:maxSummons(ammount)
    // get: monsterType:armor() set: monsterType:armor
    // get: monsterType:defense() set: monsterType:defense(defense)
    // get: monsterType:outfit() set: monsterType:outfit(outfit)
    // get: monsterType:race() set: monsterType:race(race)
    // get: monsterType:corpseId() set: monsterType:corpseId(id)
    // get: monsterType:manaCost() set: monsterType:manaCost(mana)
    // get: monsterType:baseSpeed() set: monsterType:baseSpeed(speed)
    // get: monsterType:light() set: monsterType:light(color, level)
    // get: monsterType:staticAttackChance() set: monsterType:staticAttackChance(chance)
    // get: monsterType:targetDistance() set: monsterType:targetDistance(distance)
    // get: monsterType:yellChance() set: monsterType:yellChance(chance)
    // get: monsterType:yellSpeedTicks() set: monsterType:yellSpeedTicks(rate)
    // get: monsterType:changeTargetChance() set: monsterType:changeTargetChance(chance)
    // get: monsterType:changeTargetSpeed() set: monsterType:changeTargetSpeed(speed)

Npc, guild, vocation, ItemType, house, group, combat, condition
	// npc:isNpc()
    // npc:setMasterPos(pos[, radius])
    
    // Guild(id)
    // guild:getId()
    // guild:getName()
    // guild:getMembersOnline()
    // guild:addRank(id, name, level)
    // guild:getRankById(id)
    // guild:getRankByLevel(level)
    // guild:getMotd()
    // guild:setMotd(motd)
    
    // Group(id)
    // group:getId()
    // group:getName()
    // group:getFlags()
    // group:getAccess()
    // group:getMaxDepotItems()
    // group:getMaxVipEntries()
    // group:hasFlag(flag)
    
    // Vocation(id or name)
    // vocation:getId()
    // vocation:getClientId()
    // vocation:getName()
    // vocation:getDescription()
    // vocation:getRequiredSkillTries(skillType, skillLevel)
    // vocation:getRequiredManaSpent(magicLevel)
    // vocation:getCapacityGain()
    // vocation:getHealthGain()
    // vocation:getHealthGainTicks()
    // vocation:getHealthGainAmount()
    // vocation:getManaGain()
    // vocation:getManaGainTicks()
    // vocation:getManaGainAmount()
    // vocation:getMaxSoul()
    // vocation:getSoulGainTicks()
    // vocation:getAttackSpeed()
    // vocation:getBaseSpeed()
    // vocation:getDemotion()
    // vocation:getPromotion()
    
    // Town(id or name)
    // town:getId()
    // town:getName()
    // town:getTemplePosition()
    
    
    // House(id)
    // house:getId()
    // house:getName()
    // house:getTown()
    // house:getExitPosition()
    // house:getRent()
    // house:getOwnerGuid()
    // house:setOwnerGuid(guid[, updateDatabase = true])
    // house:startTrade(player, tradePartner)
    // house:getBeds()
    // house:getBedCount()
    // house:getDoors()
    // house:getDoorCount()
    // house:getDoorIdByPosition(position)
    // house:getTiles()
    // house:getItems()
    // house:getTileCount()
    // house:canEditAccessList(listId, player)
    // house:getAccessList(listId)
    // house:setAccessList(listId, list)
    // house:kickPlayer(player, targetPlayer)
    
    // ItemType(id or name)
    // itemType:isCorpse()
    // itemType:isDoor()
    // itemType:isContainer()
    // itemType:isFluidContainer()
    // itemType:isMovable()
    // itemType:isRune()
    // itemType:isStackable()
    // itemType:isReadable()
    // itemType:isWritable()
    // itemType:isBlocking()
    // itemType:isGroundTile()
    // itemType:isGroundTile()
    // itemType:isUseable()
    // itemType:isPickupable()
    // itemType:getType()
    // itemType:getId()
    // itemType:getClientId()
    // itemType:getName()
    // itemType:getPluralName()
    // itemType:getArticle()
    // itemType:getDescription()
    // itemType:getSlotPosition()
    // itemType:getCharges()
    // itemType:getFluidSource()
    // itemType:getCapacity()
    // itemType:getWeight([count = 1])
    // itemType:getHitChance()
    // itemType:getShootRange()
    // itemType:getAttack()
    // itemType:getDefense()
    // itemType:getExtraDefense()
    // itemType:getArmor()
    // itemType:getWeaponType()
    // itemType:getAmmoType()
    // itemType:getCorpseType()
    // itemType:getElementType()
    // itemType:getElementDamage()
    // itemType:getTransformEquipId()
    // itemType:getTransformDeEquipId()
    // itemType:getDestroyId()
    // itemType:getDecayId()
    // itemType:getRequiredLevel()
    // itemType:hasSubType()
    
    // Combat()
    // combat:setParameter(key, value
    // combat:setFormula(type, mina, minb, maxa, maxb)
    // combat:setArea(area)
    // combat:addCondition(condition)
    // combat:clearConditions()
    // combat:setCallback(key, function)
    // combat:setOrigin(origin)
    // combat:execute(creature, variant)

    // Condition(conditionType[, conditionId = CONDITIONID_
    // condition:delete()
    // condition:getId()
    // condition:getSubId()
    // condition:getType()
    // condition:getIcons()
    // condition:getEndTime()
    // condition:clone()
    // condition:getTicks()
    // condition:setTicks(ticks)
    // condition:setParameter(key, value)
    // condition:setFormula(mina, minb, maxa, maxb)
    // condition:setOutfit(outfit)
    // condition:setOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons])
    // condition:addDamage(rounds, time, value)

LUA FUNCTIONS
addDamageCondition(condition, rounds, time, value)
addEvent(callback, delay, ...)
addOutfitCondition(condition, lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet)
broadcastMessage(message, messageType)
Game.broadcastMessage(message, messageType)
canPlayerLearnInstantSpell(cid, name)
canPlayerWearOutfit(cid, lookType, addons)
cleanMap()
createCombatArea( {area}, <optional> {extArea} )
createCombatObject()
createConditionObject(type)
Creature.getClosestFreePosition(self, position, extended)
debugPrint(text)
doAddCondition(cid, condition)
doAddContainerItem(uid, itemid, <optional> count/subtype)
doAddContainerItemEx(uid, virtualId)
doAddMapMark(cid, pos, type, description)
doAreaCombatCondition(cid, pos, area, condition, effect)
doAreaCombatDispel(cid, pos, area, type, effect)
doAreaCombatHealth(cid, type, pos, area, min, max, effect)
doAreaCombatMana(cid, pos, area, min, max, effect)
doChallengeCreature(cid, target)
doChangeSpeed(cid, delta)
doChangeTypeItem(uid, newtype)
doCombat(cid, combat, param)
doConvinceCreature(cid, target)
doCreateItem(itemid, type/count, pos)
doCreateItemEx(itemid, <optional> count/subtype)
doCreateNpc(name, pos)
doCreateTeleport(itemid, topos, createpos)
doCreatureAddHealth(cid, health)
doCreatureChangeOutfit(cid, outfit)
doCreatureSay(cid, text, type, ...)
doCreatureSayWithRadius(cid, text, type, radiusx, radiusy, position)
doCreatureSetLookDir(cid, direction)
doDecayItem(uid)
doForceSummonCreature(name, pos)
doMonsterChangeTarget(cid)
doMoveCreature(cid, direction)
doPlayerAddBlessing(cid, blessing)
doPlayerAddExp(cid, exp, useMult, ...)
doPlayerAddItem(cid, itemid, <optional: default: 1> count, <optional: default: 1> canDropOnMap, <optional: default: 1>subtype)
doPlayerAddItem(uid, itemid, <optional: default: 1> count/subtype)
doPlayerAddItemEx(cid, uid, ...)
doPlayerAddMana(cid, mana, ...)
doPlayerAddManaSpent(cid, mana)
doPlayerAddMoney(cid, money)
doPlayerAddMount(cid, mountId)
doPlayerAddOutfit(cid, lookType, addons)
doPlayerAddPremiumDays(cid, days)
doPlayerAddSkillTry(cid, skillid, n)
doPlayerAddSoul(cid, soul)
doPlayerFeed(cid, food)
doPlayerJoinParty(cid, leaderId)
doPlayerPopupFYI(cid, message)
doPlayerRemOutfit(cid, lookType, addons)
doPlayerRemoveItem(cid, itemid, count, <optional> subtype, <optional> ignoreEquipped)
doPlayerRemoveMoney(cid, money)
doPlayerRemoveMount(cid, mountId)
doPlayerRemovePremiumDays(cid, days)
doPlayerSendCancel(cid, text)
doPlayerSendTextMessage(cid, type, text, ...)
doPlayerSetBalance(cid, balance)
doPlayerSetGuildLevel(cid, level)
doPlayerSetGuildNick(cid, nick)
doPlayerSetOfflineTrainingSkill(cid, skill)
doPlayerSetSex(cid, sex)
doPlayerSetTown(cid, town)
doPlayerSetVocation(cid, vocation)
doRelocate(pos, posTo)
doRemoveCondition(cid, type[, subId])
doRemoveCreature(cid)
doRemoveItem(uid, ...)
doSendDistanceShoot(fromPos, toPos, distanceEffect, ...)
doSendMagicEffect(pos, magicEffect, ...)
doSendTutorial(cid, tutorialId)
doSetCreatureDropLoot(cid, doDrop)
doSetCreatureLight(cid, lightLevel, lightColor, time)
doSetCreatureOutfit(cid, outfit, time)
doSetItemActionId(uid, actionId)
doSetItemOutfit(cid, item, time)
doSetItemSpecialDescription(uid, desc)
doSetItemText(uid, text)
doSetMonsterOutfit(cid, name, time)
doSetMonsterTarget(cid, target)
doShowTextDialog(cid, itemId, text)
doSummonCreature(name, pos)
doTargetCombatCondition(cid, target, condition, effect)
doTargetCombatDispel(cid, target, type, effect)
doTargetCombatHealth(cid, target, type, min, max, effect)
doTargetCombatMana(cid, target, min, max, effect)
doTeleportThing(uid, dest, pushMovement)
doTileAddItemEx(pos, uid)
doTransformItem(uid, newItemId, ...)
Game.convertIpToString(ip)
Game.getStorageValue(key)
Game.setStorageValue(key, value)
getAccountNumberByPlayerName(name)
getBlessingsCost(level)
getConfigInfo(info)
getContainerCap(uid)
getContainerCapById(itemId)
getContainerItem(uid, slot)
getContainerSize(uid)
getCreatureBaseSpeed(cid)
getCreatureCondition(cid, condition[, subId])
getCreatureHealth(cid)
getCreatureMaster(cid)
getCreatureMaxHealth(cid)
getCreatureName(cid)
getCreatureOutfit(cid)
getCreaturePosition(cid)
getCreatureSpeed(cid)
getCreatureSummons(cid)
getCreatureTarget(cid)
getDepotId(uid)
getDistanceBetween(firstPosition, secondPosition)
getFluidSourceType(itemId)
getGlobalStorageValue(key)
getGuildId(guildName)
getHouseAccessList(id, listId)
getHouseByPlayerGUID(playerGUID)
getHouseEntry(houseId)
getHouseName(houseId)
getHouseOwner(houseId)
getHouseRent(id)
getHouseTilesSize(houseId)
getHouseTown(houseId)
getInstantSpellInfoByName(cid, name)
getInstantSpellWords(name)
getIPByPlayerName(name)
getItemDescriptions(itemId)
getItemIdByName(name)
getItemName(itemId)
getItemRWInfo(uid)
getItemWeight(itemId, ...)
getItemWeightByUID(uid, ...)
getMonsterFriendList(cid)
getMonsterTargetList(cid)
getOnlinePlayers()
getPartyMembers(cid)
getPlayerAccess(cid)
getPlayerAccountType(cid)
getPlayerBalance(cid)
getPlayerBlessing(cid, blessing)
getPlayerByName(name)
getPlayerDepotItems(cid, depotId)
getPlayerFlagValue(cid, flag)
getPlayerFood(cid)
getPlayerFreeCap(cid)
getPlayerGroupId(cid)
getPlayerGUID(cid)
getPlayerGUIDByName(name)
getPlayerGuildId(cid)
getPlayerGuildLevel(cid)
getPlayerGuildName(cid)
getPlayerGuildNick(cid)
getPlayerGuildRank(cid)
getPlayerInstantSpellCount(cid)
getPlayerInstantSpellInfo(cid, index)
getPlayerIp(cid)
getPlayerItemById(cid, deepSearch, itemId, ...)
getPlayerItemCount(cid, itemId, ...)
getPlayerLastLoginSaved(cid)
getPlayerLearnedInstantSpell(cid, name)
getPlayerLevel(cid)
getPlayerLight(cid)
getPlayerLookDir(cid)
getPlayerLossPercent(cid)
getPlayerMagLevel(cid)
getPlayerMana(cid)
getPlayerMasterPos(cid)
getPlayerMaxMana(cid)
getPlayerMoney(cid)
getPlayerMount(cid, mountId)
getPlayerName(cid)
getPlayerParty(cid)
getPlayerPosition(cid)
getPlayerPremiumDays(cid)
getPlayersByAccountNumber(accountNumber)
getPlayersByIPAddress(ip, mask)
getPlayerSex(cid)
getPlayerSkill(cid, skillId)
getPlayerSkullType(cid)
getPlayerSlotItem(cid, slot)
getPlayerSoul(cid)
getPlayerStorageValue(cid, key)
getPlayerTown(cid)
getPlayerVocation(cid)
getPromotedVocation(vocationId)
getPvpBlessingCost(level)
getSpectators(centerPos, rangex, rangey, multifloor, onlyPlayers)
getThing(uid)
getThingfromPos(pos)
getThingPos(uid)
getTibianTime()
getTileHouseInfo(pos)
getTileInfo(position)
getTileItemById(position, itemId, ...)
getTileItemByType(position, itemType)
getTilePzInfo(position)
getTileThingByPos(position)
getTileThingByTopOrder(position, topOrder)
getTopCreature(position)
getTownId(townName)
getTownName(townId)
getTownTemplePosition(townId)
getWaypointPosition(name)
getWorldCreatures(type)
getWorldLight()
getWorldTime()
getWorldUpTime()
hasProperty(uid, prop)
isContainer(uid)
isCorpse(uid)
isCreature(cid)
isDepot(uid)
isDruid(cid)
isInArray(array, value)
isInRange(pos, fromPos, toPos)
isInWar(cid, target)
isItem(uid)
isItemContainer(itemId)
isItemDoor(itemId)
isItemFluidContainer(itemId)
isItemMovable(itemId)
isItemRune(itemId)
isItemStackable(itemId)
isKnight(cid)
isMonster(cid)
isMovable(uid)
isNpc(cid)
isNumber(str)
isPaladin(cid)
isPlayer(cid)
isPlayerGhost(cid)
isPlayerPzLocked(cid)
isPremium(cid)
isSightClear(fromPos, toPos, floorCheck)
isSorcerer(cid)
isSummon(cid)
isValidUID(uid)
mayNotMove(cid, value)
numberToVariant(number)
Player.feed(self, food)
Player.isUsingOtClient(self)
Player.sendCancelMessage(self, message)
Player.sendExtendedOpcode(self, opcode, buffer)
playerLearnInstantSpell(cid, name)
Position.getNextPosition(self, direction, steps)
positionToVariant(pos)
pushThing(thing)
queryTileAddThing(thing, position, ...)
registerClass(className, baseClass, newFunction)
registerCreatureEvent(cid, name)
registerEnum(value)
registerEnumIn(tableName, value)
registerGlobalMethod(functionName, function)
registerGlobalVariable(name, value)
registerMetaMethod(className, functionName, function)
registerMethod(className, functionName, function)
registerTable(tableName)
registerVariable(tableName, name, value)
saveServer()
sendChannelMessage(channelId, type, message)
sendGuildChannelMessage(guildId, type, message)
setCombatArea(combat, area)
setCombatCallBack(combat, key, function_name)
setCombatCondition(combat, condition)
setCombatFormula(combat, type, mina, minb, maxa, maxb)
setCombatParam(combat, key, value)
setConditionFormula(combat, mina, minb, maxa, maxb)
setConditionParam(condition, key, value)
setGlobalStorageValue(key, value)
setHouseAccessList(id, listId, listText)
setHouseOwner(id, guid)
setPlayerGroupId(cid, groupId)
setPlayerStorageValue(cid, key, value)
stopEvent(eventid)
string.split(str, sep)
stringToVariant(string)
targetPositionToVariant(pos)
unregisterCreatureEvent(cid, name)
variantToNumber(var)
variantToPosition(var)
variantToString(var)

Game
	Game.createContainer(itemId, size[, position])
	Game.createItem(itemId[, count[, position]])
	Game.createMonster(monsterName, position[, extended = false[, force = false]])
	Game.createNpc(npcName, position[, extended = false[, force = false]])
	Game.createTile(position[, isDynamic = false])
	Game.createTile(x, y, z[, isDynamic = false])
	Game.getExperienceStage(level)
	Game.getGameState()
	Game.getHouses()
	Game.getMonsterCount()
	Game.getNpcCount()
	Game.getPlayerCount()
	Game.getPlayers()
	Game.getReturnMessage(value)
	Game.getSpectators(position[, multifloor = false[, onlyPlayer = false[, minRangeX = 0[, maxRangeX = 0[, minRangeY = 0[, maxRangeY = 0]]]]]])
	Game.getTowns()
	Game.getWorldType()
	Game.loadMap(path)
	Game.setGameState(state)
	Game.setWorldType(type)	
	Game.startRaid(raidName)
 
Combat
	Combat()	
	combat:execute(creature, variant)
	combat:setArea(area)
	combat:setCallback(key, function)
	combat:setCondition(condition)
	combat:setFormula(type, mina, minb, maxa, maxb)
	combat:setOrigin(origin)
	combat:setParameter(key, value)
 
Condition
	Condition(conditionType[, conditionId = CONDITIONID_COMBAT])	
	condition:addDamage(rounds, time, value)
	condition:clone()
	condition:delete()
	condition:getEndTime()
	condition:getIcons()
	condition:getId()
	condition:getSubId()
	condition:getTicks()
	condition:getType()
	condition:setFormula(mina, minb, maxa, maxb)
	condition:setOutfit(lookTypeEx, lookType, lookHead, lookBody, lookLegs, lookFeet[, lookAddons[, lookMount]])
	condition:setOutfit(outfit)
	condition:setParameter(key, value)
	condition:setTicks(ticks)
 
Container
	Container(uid)	
	container:addItem(itemId[, count/subType = 1[, index = INDEX_WHEREEVER[, flags = 0]]])
	container:addItemEx(item[, index = INDEX_WHEREEVER[, flags = 0]])
	container:getCapacity()
	container:getEmptySlots([recursive = false])
	container:getItem(index)
	container:getItemCountById(itemId[, subType = -1])
	container:getItemHoldingCount()
	container:getSize()
	container:hasItem(item)
 
Creature
	Creature(id or name or userdata)
	creature:addCondition(condition[, force = false])
	creature:addHealth(healthChange)
	creature:addMana(manaChange[, animationOnLoss = false])
	creature:canSee(position)
	creature:canSeeCreature(creature)
	creature:changeSpeed(delta)
	creature:getBaseSpeed()
	creature:getCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0]])
	creature:getDamageMap()
	creature:getDescription(distance)
	creature:getDirection()
	creature:getFollowCreature()
	creature:getHealth()
	creature:getId()
	creature:getLight()
	creature:getMana()
	creature:getMaster()
	creature:getMaxHealth()
	creature:getMaxMana()
	creature:getName()
	creature:getOutfit()
	creature:getParent()
	creature:getPathTo(pos[, minTargetDist = 0[, maxTargetDist = 1[, fullPathSearch = true[, clearSight = true[, maxSearchDist = 0]]]]])
	creature:getPosition()
	creature:getSkull()
	creature:getSpeed()
	creature:getSummons()
	creature:getTarget()
	creature:getTile()
	creature:isCreature()
	creature:isHealthHidden()
	creature:isInGhostMode()
	creature:isRemoved()
	creature:registerEvent(name)
	creature:remove()
	creature:removeCondition(conditionType[, conditionId = CONDITIONID_COMBAT[, subId = 0[, force = false]]])
	creature:say(text, type[, ghost = false[, target = nullptr[, position]]])
	creature:setDirection(direction)
	creature:setDropLoot(doDrop)
	creature:setFollowCreature(followedCreature)
	creature:setHiddenHealth(hide)
	creature:setLight(color, level)
	creature:setMaster(master)
	creature:setMaxHealth(maxHealth)
	creature:setOutfit(outfit)
	creature:setSkull(skull)
	creature:setTarget(target)
	creature:teleportTo(position[, pushMovement = false])
	creature:unregisterEvent(name)
	creature:getStorageValue(key)
	creature:setStorageValue(key)
 
Group
	Group(id)	
	group:getAccess()
	group:getFlags()
	group:getId()
	group:getMaxDepotItems()
	group:getMaxVipEntries()
	group:getName()
 
Guild
	Guild(id)	
	guild:addRank(id, name, level)
	guild:getId()
	guild:getMembersOnline()
	guild:getMotd()
	guild:getName()
	guild:getRankById(id)
	guild:getRankByLevel(level)
	guild:setMotd(motd)
 
House
	House(id)	
	house:getAccessList(listId)
	house:getBedCount()
	house:getBeds()
	house:getDoorCount()
	house:getDoors()
	house:getExitPosition()
	house:getId()
	house:getName()
	house:getOwnerGuid()
	house:getRent()
	house:getTileCount()
	house:getTiles()
	house:getTown()
	house:setAccessList(listId, list)
	house:setOwnerGuid(guid[, updateDatabase = true])
 
Item
	Item(uid)	
	item:clone()
	item:decay()
	item:getActionId()
	item:getArticle()
	item:getAttribute(key)
	item:getCharges()
	item:getCount()
	item:getDescription(distance)
	item:getFluidType()
	item:getId()
	item:getName()
	item:getParent()
	item:getPluralName()
	item:getPosition()
	item:getSubType()
	item:getTile()
	item:getTopParent()
	item:getUniqueId()
	item:getWeight()
	item:hasAttribute(key)
	item:hasProperty(property)
	item:moveTo(position or cylinder)
	item:remove([count = -1])
	item:removeAttribute(key)
	item:setActionId(actionId)
	item:setAttribute(key, value)
	item:split([count = 1])
	item:transform(itemId[, count/subType = -1])
	item:getCustomAttribute(key)
	item:setCustomAttribute(key, value)
	item:removeCustomAttribute(key)
 
ItemType
	ItemType(id or name)	
	itemType:getArmor()
	itemType:getArticle()
	itemType:getAttack()
	itemType:getCapacity()
	itemType:getCharges()
	itemType:getClientId()
	itemType:getDecayId()
	itemType:getDefense()
	itemType:getDescription()
	itemType:getDestroyId()
	itemType:getElementDamage()
	itemType:getElementType()
	itemType:getExtraDefense()
	itemType:getFluidSource()
	itemType:getHitChance()
	itemType:getId()
	itemType:getName()
	itemType:getPluralName()
	itemType:getRequiredLevel()
	itemType:getShootRange()
	itemType:getSlotPosition()
	itemType:getTransformDeEquipId()
	itemType:getTransformEquipId()
	itemType:getType()
	itemType:getWeaponType()
	itemType:getWeight([count = 1])
	itemType:hasSubType()
	itemType:isContainer()
	itemType:isFluidContainer()
	itemType:isMovable()
	itemType:isReadable()
	itemType:isRune()
	itemType:isStackable()
	itemType:isWritable()
 
ModalWindow
	ModalWindow(id, title, message)	
	modalWindow:addButton(id, text)
	modalWindow:addChoice(id, text)
	modalWindow:getButtonCount()
	modalWindow:getChoiceCount()
	modalWindow:getDefaultEnterButton()
	modalWindow:getDefaultEscapeButton()
	modalWindow:getId()
	modalWindow:getMessage()
	modalWindow:getTitle()
	modalWindow:hasPriority()
	modalWindow:sendToPlayer(player)	item:isItem()
	modalWindow:setDefaultEnterButton(buttonId)
	modalWindow:setDefaultEscapeButton(buttonId)
	modalWindow:setMessage(text)
	modalWindow:setPriority(priority)
	modalWindow:setTitle(text)
 
Monster
	Monster(id or userdata)	
	monster:addFriend(creature)
	monster:addTarget(creature[, pushFront = false])
	monster:getFriendCount()
	monster:getFriendList()
	monster:getSpawnPosition()
	monster:getTargetCount()
	monster:getTargetList()
	monster:getType()
	monster:isFriend(creature)
	monster:isIdle()
	monster:isInSpawnRange([position])
	monster:isMonster()
	monster:isOpponent(creature)
	monster:isTarget(creature)
	monster:removeFriend(creature)
	monster:removeTarget(creature)
	monster:searchTarget([searchType = TARGETSEARCH_DEFAULT])
	monster:selectTarget(creature)
	monster:setIdle(idle)
	monsterType:canPushCreatures()
	monsterType:canPushItems()
	monsterType:getArmor()
	monsterType:getAttackList()
	monsterType:getBaseSpeed()
	monsterType:getChangeTargetChance()
	monsterType:getChangeTargetSpeed()
	monsterType:getCombatImmunities()
	monsterType:getConditionImmunities()
	monsterType:getCorpseId()
	monsterType:getCreatureEvents()
	monsterType:getDefense()
	monsterType:getDefenseList()
	monsterType:getElementList()
	monsterType:getExperience()
	monsterType:getHealth()
	monsterType:getLight()
	monsterType:getLoot()
	monsterType:getManaCost()
	monsterType:getMaxHealth()
	monsterType:getMaxSummons()
	monsterType:getName()
	monsterType:getNameDescription()
	monsterType:getOutfit()
	monsterType:getRace()
	monsterType:getRunHealth()
	monsterType:getStaticAttackChance()
	monsterType:getSummonList()
	monsterType:getTargetDistance()
	monsterType:getVoices()
	monsterType:getYellChance()
	monsterType:getYellSpeedTicks()
	monsterType:isAttackable()
	monsterType:isConvinceable()
	monsterType:isHealthShown()
	monsterType:isHostile()
	monsterType:isIllusionable()
	monsterType:isPushable()
	monsterType:isSummonable()
	monster:getStorageValue(key)
	monster:setStorageValue(key)
 
NetworkMessage
	NetworkMessage()	
	networkMessage:addByte(number)
	networkMessage:addDouble(number)
	networkMessage:addItem(item)
	networkMessage:addItemId(itemId)
	networkMessage:addPosition(position)
	networkMessage:addString(string)
	networkMessage:addU16(number)
	networkMessage:addU32(number)
	networkMessage:addU64(number)
	networkMessage:getByte()
	networkMessage:getPosition()
	networkMessage:getString()
	networkMessage:getU16()
	networkMessage:getU32()
	networkMessage:getU64()
	networkMessage:reset()
	networkMessage:sendToPlayer(player)
	networkMessage:skipBytes(number)
 
Npc
	Npc([id or name or userdata])	
	npc:getSpeechBubble()
	npc:isNpc()
	npc:setMasterPos(pos[, radius])
	npc:setSpeechBubble(speechBubble)
 
Party	
	party:addInvite(player)
	party:addMember(player)
	party:disband()
	party:getInviteeCount()
	party:getInvitees()
	party:getLeader()
	party:getMemberCount()
	party:getMembers()
	party:isSharedExperienceActive()
	party:isSharedExperienceEnabled()
	party:removeInvite(player)
	party:removeMember(player)
	party:setLeader(player)
	party:setSharedExperience(active)
	party:shareExperience(experience)
 
Player
	Player(id or name or userdata)	
	player:addBlessing(blessing)
	player:addExperience(experience[, sendText = false])
	player:addItem(itemId[, count = 1[, canDropOnMap = true[, subType = 1[, slot = CONST_SLOT_WHEREEVER]]]])
	player:addItemEx(item[, canDropOnMap = false[, index = INDEX_WHEREEVER[, flags = 0]]])
	player:addItemEx(item[, canDropOnMap = true[, slot = CONST_SLOT_WHEREEVER]])
	player:addManaSpent(amount)
	player:addMapMark(position, type, description)
	player:addMoney(money)
	player:addMount(mountId)
	player:addOfflineTrainingTime(time)
	player:addOfflineTrainingTries(skillType, tries)
	player:addOutfit(lookType)
	player:addOutfitAddon(lookType, addon)
	player:addPremiumDays(days)
	player:addSkillTries(skillType, tries)
	player:addSoul(soulChange)
	player:canLearnSpell(spellName)
	player:channelSay(speaker, type, text, channelId)
	player:forgetSpell(spellName)
	player:getAccountId()
	player:getAccountType()
	player:getBankBalance()
	player:getBaseMagicLevel()
	player:getCapacity()
	player:getClient()
	player:getContainerById(id)
	player:getContainerId(container)
	player:getContainerIndex(id)
	player:getDeathPenalty()
	player:getDepotChest(depotId[, autoCreate = false])
	player:getEffectiveSkillLevel(skillType)
	player:getExperience()
	player:getFreeCapacity()
	player:getGroup()
	player:getGuid()
	player:getGuild()
	player:getGuildLevel()
	player:getGuildNick()
	player:getHouse()
	player:getInbox()
	player:getIp()
	player:getItemById(itemId, deepSearch[, subType = -1])
	player:getItemCount(itemId[, subType = -1])
	player:getLastLoginSaved()
	player:getLastLogout()
	player:getLevel()
	player:getMagicLevel()
	player:getManaSpent()
	player:getMaxSoul()
	player:getMoney()
	player:getOfflineTrainingSkill()
	player:getOfflineTrainingTime()
	player:getParty()
	player:getPremiumDays()
	player:getSex()
	player:getSkillLevel(skillType)
	player:getSkillPercent(skillType)
	player:getSkillTries(skillType)
	player:getSkullTime()
	player:getSlotItem(slot)
	player:getSoul()
	player:getStamina()
	player:getStorageValue(key)
	player:getTown()
	player:getVocation()
	player:hasBlessing(blessing)
	player:hasLearnedSpell(spellName)
	player:hasMount(mountId)
	player:hasOutfit(lookType[, addon = 0])
	player:isPlayer()
	player:isPzLocked()
	player:learnSpell(spellName)
	player:openChannel(channelId)
	player:popupFYI(message)
	player:removeBlessing(blessing)
	player:removeExperience(experience[, sendText = false])
	player:removeItem(itemId, count[, subType = -1[, ignoreEquipped = false]])
	player:removeMoney(money)
	player:removeMount(mountId)
	player:removeOfflineTrainingTime(time)
	player:removeOutfit(lookType)
	player:removeOutfitAddon(lookType, addon)
	player:removePremiumDays(days)
	player:save()
	player:sendChannelMessage(author, text, type, channelId)
	player:sendOutfitWindow()
	player:sendPrivateMessage(speaker, text[, type])
	player:sendTextMessage(type, text[, position, primaryValue = 0, primaryColor = TEXTCOLOR_NONE[, secondaryValue = 0, secondaryColor = TEXTCOLOR_NONE]])
	player:sendTutorial(tutorialId)
	player:setAccountType(accountType)
	player:setBankBalance(bankBalance)
	player:setCapacity(capacity)
	player:setGhostMode(enabled)
	player:setGroup(group)
	player:setGuild(guild)
	player:setGuildLevel(level)
	player:setGuildNick(nick)
	player:setMaxMana(maxMana)
	player:setOfflineTrainingSkill(skillId)
	player:setSex(newSex)
	player:setSkullTime(skullTime)
	player:setStamina(stamina)
	player:setStorageValue(key, value)
	player:setTown(town)
	player:setVocation(id or name or userdata)
	player:showTextDialog(itemId[, text[, canWrite[, length]]])
 
Position
	Position([x = 0[, y = 0[, z = 0[, stackpos = 0]]]])
	Position([position])
	positionValue = position + positionEx
	positionValue = position - positionEx
	position == positionEx	
	position:getDistance(positionEx)
	position:isSightClear(positionEx[, sameFloor = true])
	position:sendDistanceEffect(positionEx, distanceEffect[, player = nullptr])
	position:sendMagicEffect(magicEffect[, player = nullptr])
 
Teleport
	Teleport(uid)	
	teleport:getDestination()
	teleport:setDestination(position)
 
Tile
	Tile(x, y, z)
	Tile(position)	
	tile:getBottomCreature()
	tile:getBottomVisibleCreature(creature)
	tile:getCreatureCount()
	tile:getCreatures()
	tile:getDownItemCount()
	tile:getFieldItem()
	tile:getGround()
	tile:getHouse()	
	tile:getItemById(itemId[, subType = -1])
	tile:getItemByTopOrder(topOrder)
	tile:getItemByType(itemType)
	tile:getItemCount()
	tile:getItemCountById(itemId[, subType = -1])
	tile:getItems()
	tile:getPosition()
	tile:getThing(index)
	tile:getThingCount()
	tile:getThingIndex(thing)
	tile:getTopCreature()
	tile:getTopDownItem()
	tile:getTopItemCount()
	tile:getTopTopItem()
	tile:getTopVisibleCreature(creature)
	tile:getTopVisibleThing(creature)
	tile:hasFlag(flag)
	tile:hasProperty(property[, item])
	tile:queryAdd(thing[, flags])
 
Town
	Town(id or name)	
	town:getId()
	town:getName()
	town:getTemplePosition()
 
Variant
	Variant(number or string or position or thing)
	Variant:getNumber()
	Variant:getPosition()
	Variant:getString()
 
Vocation
	Vocation(id or name)	
	vocation:getAttackSpeed()
	vocation:getBaseSpeed()
	vocation:getCapacityGain()
	vocation:getClientId()
	vocation:getDemotion()
	vocation:getDescription()
	vocation:getHealthGain()
	vocation:getHealthGainAmount()
	vocation:getHealthGainTicks()
	vocation:getId()
	vocation:getManaGain()
	vocation:getManaGainAmount()
	vocation:getManaGainTicks()
	vocation:getMaxSoul()
	vocation:getName()
	vocation:getPromotion()
	vocation:getRequiredManaSpent(magicLevel)
	vocation:getRequiredSkillTries(skillType, skillLevel)
	vocation:getSoulGainTicks()
